import java.util.Map;
/***
 *  authors Coach Sam, Coach Dillon
 *   A control Module takes in input from sensor modules does processing and makes decisions and sends outputs to the robot.
 * every private variable is logged through the hash map generated by get state. this is used for debugging.
 */
public abstract class ControlModule implements RobotModule{
    /*Congratulations you may now have private variables
    * for now we only want things set on construction of the class as this is not an output method. but in methods extending
    this class you can add your own private variables
    */

    private SensorModule sensors;
    private OutputModule hardwareOutputs; 
    /*** 
     * This is the Defualt constructor set initial values of any private variables here
     * You want to overide this method for ControlModules you might create.
     */
    public ControlModule(SensorModule Sensors, OutputModue outputs){
            this.sensors = sensors;   //I have set the sensors object reference to sensors once created this "Should be pass by reference"
            this.outputs = outputs;   //I have set the output once created reference to sensors once created this "Should be pass by reference"
    }
     /*** This is the entry point int module use this module to read data from sensors or make calculations, or output commands 
     * to robot hardware if you do this write only on the update should be exposed for a module. all other methods shoud be private
     * with the exception of the getState method below. update will be called once per module by teleop Periodic
     */
    public abstract int update();

    /** Coach Dillan recomends state Obects and hashmaps and I agree With him states and hashmaps are useful this will be the function
     called to get this map from your object by the telemetry module you need to implement this for every Module you create*/
    public abstract Map<String, Object> getState();

}